#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/rtc.h"
#include <string.h>  // Include string.h for strlen
#include <stdlib.h>  // Include stdlib.h for free
#include "hardware/spi.h"
#include "ff.h"  // FATFS library for file operations

#include "hardware/pwm.h"  // PWM library for pulse generation

#include <time.h>  // For random number generation

// Create instances for FATFS and FIL
FATFS fs;
FIL fil;  // File object

DIR dir;
FILINFO fno;
FRESULT fr;

// define button for GP20 (acting as creating file to sd)
const uint WRITE_BTNPIN_20 = 20;
// define button for GP21 (acting as reading file from sd)
const uint READ_BTNPIN_21 = 21;
// define button for GP22 (acting as exiting program)
const uint EXIT_BTNPIN_22 = 22;

//simple counter tht increments when creating file
static int filename_counter = 1;

// for debounce configuration (300ms)
#define DEBOUNCE_DELAY 300
static absolute_time_t last_button_press;

// Global variable to track if filesystem is mounted
static bool fs_mounted = false;

// experimental ------------------------------------------------
typedef struct{
    uint32_t timestamp; // need the buddies to retrieve from web console via NTP
    uint32_t frequency;
    float duty_cycle;
    uint32_t total_pulse_width; //Duration of the pulse in microseconds (from falling to rising edge)
    uint32_t pulse_width_high_time;
    uint32_t pulse_width_low_time;
} PulseData;

PulseData *pulsedata_array = NULL; //Pointer for dynamic memory allocation for PulseData
uint32_t pulse_count = 0; //Counter to keep track of number of pulses
uint32_t pulsedata_array_size = 0; //Size of the array (to make dynamic)

// initialize the PulseData array
void initialize_pulsedata_array() {
    pulsedata_array_size = 10; //setting size for 10 pulses for now
    pulsedata_array = (PulseData *)malloc(pulsedata_array_size * sizeof(PulseData));
    if(pulsedata_array == NULL) {
        printf("Failed to allocate memory for PulseData array\n");
        exit(1);
    }
}

// ---------------------------------------------------------------
// result to verify the file status
void print_fresult(FRESULT fr) {
    switch (fr) {
        // different cases to check status of file operation
        case FR_OK: printf("Success\n"); break;
        case FR_NOT_READY: printf("Not Ready\n"); break;
        case FR_NO_FILE: printf("No File\n"); break;
        case FR_NO_PATH: printf("No Path\n"); break;
        case FR_INVALID_DRIVE: printf("Invalid Drive\n"); break;
        // Add other cases as necessary
        default: printf("Unknown Error: %d\n", fr); break;
    }
}

// Simulate the pulse sequence and populate the global pulsedata_array (temporary)
void simulate_pulse_sequence(uint32_t pulse_count) {
    srand(time(NULL));

    if (pulse_count > pulsedata_array_size) {
        pulsedata_array = (PulseData *)realloc(pulsedata_array, pulse_count * sizeof(PulseData));
        if (pulsedata_array == NULL) {
            printf("Failed to reallocate memory for PulseData array\n");
            exit(1);
        }
        pulsedata_array_size = pulse_count;
    }

    for (int i = 0; i < pulse_count; i++) {
        // Calculate values in the correct order
        uint32_t frequency = 10 + (rand() % 91);  // Frequency between 10 and 100 Hz
        float duty_cycle = (30.0f + (rand() % 41)) / 100.0f;  // Duty cycle between 30% and 70%
        uint32_t total_pulse_width = (uint32_t)(1e6 / frequency);  // Total pulse width in microseconds

        // Store values in the struct in the correct order
        pulsedata_array[i].timestamp = 123456789 + i * 100000;
        pulsedata_array[i].frequency = frequency;
        pulsedata_array[i].duty_cycle = duty_cycle;
        pulsedata_array[i].total_pulse_width = total_pulse_width;
        
        // Calculate and store the high and low times - these are what we want to save
        pulsedata_array[i].pulse_width_high_time = (uint32_t)(duty_cycle * total_pulse_width);
        pulsedata_array[i].pulse_width_low_time = total_pulse_width - pulsedata_array[i].pulse_width_high_time;
    }

    // Print the simulated data for verification
    for (int i = 0; i < pulse_count; i++) {
        printf("--- Digital Signal Analyzer ---\n");
        printf("Timestamp: %u\n", pulsedata_array[i].timestamp);
        printf("Frequency: %.2f Hz   Duty Cycle: %.2f%%\n", 
               (float)pulsedata_array[i].frequency, 
               pulsedata_array[i].duty_cycle * 100);
        printf("Total Pulse Width: %u us\n", pulsedata_array[i].total_pulse_width);
        printf("PW High Time: %u us   PW Low Time: %u us\n", 
               pulsedata_array[i].pulse_width_high_time, 
               pulsedata_array[i].pulse_width_low_time);
        printf("\n");
    }
}

// only pulse_width_high_time and pulse_width_low_time are saved to the file (binary)
void save_pulse_sequence2(FIL *file) {
    UINT bw;

    // Create a buffer to store only the pulse_width_high_time and pulse_width_low_time
    uint32_t pulse_times[2 * pulse_count];  // Each pulse has two 32-bit values

    // Fill the buffer with the pulse_width_high_time and pulse_width_low_time from the pulsedata_array
    for (int i = 0; i < pulse_count; i++) {
        pulse_times[2 * i] = pulsedata_array[i].pulse_width_high_time;
        pulse_times[2 * i + 1] = pulsedata_array[i].pulse_width_low_time;
    }

    // Write the pulse_times array to the file in binary format
    FRESULT res = f_write(file, pulse_times, 2 * pulse_count * sizeof(uint32_t), &bw);
    
    // Check if the write operation was successful
    if (res != FR_OK || bw < 2 * pulse_count * sizeof(uint32_t)) {
        printf("Failed to write to file\n");
    } else {
        printf("Successfully wrote %u pulses to file\n", pulse_count);
    }
}

// only pulse_width_high_time and pulse_width_low_time are saved to the file (txt)
void save_pulse_sequence_txt2(FIL *file) {
    UINT bw;
    FRESULT fr;
    char buffer[50];  // Buffer for each pair of values
    
    // Write the first pair without a leading space
    snprintf(buffer, sizeof(buffer), "%u %u", 
             pulsedata_array[0].pulse_width_high_time,
             pulsedata_array[0].pulse_width_low_time);
    
    fr = f_write(file, buffer, strlen(buffer), &bw);
    if (fr != FR_OK || bw < strlen(buffer)) {
        printf("Failed to write to text file\n");
        return;
    }

    // Write the remaining pairs with a leading space
    for (int i = 1; i < pulse_count; i++) {
        snprintf(buffer, sizeof(buffer), " %u %u",  // Note the leading space
                 pulsedata_array[i].pulse_width_high_time,
                 pulsedata_array[i].pulse_width_low_time);

        fr = f_write(file, buffer, strlen(buffer), &bw);
        if (fr != FR_OK || bw < strlen(buffer)) {
            printf("Failed to write to text file\n");
            break;
        }
    }

    printf("Successfully wrote %u pulses to text file\n", pulse_count);
}

// freeing dynamic memory allocation for PulseData array
void free_pulsedata_array(){
    if (pulsedata_array != NULL) {
        free(pulsedata_array);
        pulsedata_array = NULL;
    }
}

void cleanup_exit(){
    // Free dynamically allocated memory
    free_pulsedata_array();

    // Disable interrupts for buttons
    gpio_set_irq_enabled(WRITE_BTNPIN_20, GPIO_IRQ_EDGE_FALL, false);
    gpio_set_irq_enabled(READ_BTNPIN_21, GPIO_IRQ_EDGE_FALL, false);
    gpio_set_irq_enabled(EXIT_BTNPIN_22, GPIO_IRQ_EDGE_FALL, false);

    // Unmount filesystem if mounted
    if (fs_mounted) {
        f_unmount("");
        printf("Filesystem unmounted successfully\n");
    }

    // Exit the program
    printf("Exiting program...\n");
    exit(0);  // Clean exit
}

int writePulseHighLowToSD(){
    printf("Starting write operation...\n");
    if (!fs_mounted) {
        printf("Filesystem not mounted!\n");
        return -1;
    }

    // Create a unique binary filename
    char bin_filename[20];
    snprintf(bin_filename, sizeof(bin_filename), "file%d.bin", filename_counter++);  // Use .bin extension for binary file

    // Create a unique text filename
    char txt_filename[20];
    snprintf(txt_filename, sizeof(txt_filename), "file%d.txt", filename_counter++);  // Use .txt extension for text file
    
    // Attempt to create and open the binary file for writing
    printf("Attempting to create binary file: %s\n", bin_filename);
    FRESULT fr = f_open(&fil, bin_filename, FA_WRITE | FA_CREATE_ALWAYS);
    if (fr != FR_OK) {
        printf("Failed to open binary file for writing. Error code: ");
        print_fresult(fr);
        return -1;
    }
    printf("Binary file opened successfully\n");

    // Save the pulse sequence (only high and low times) to the binary file
    save_pulse_sequence2(&fil);

    // Close the binary file after writing the pulses
    f_close(&fil);
    printf("Binary file closed successfully\n");
    // -------------------------------------------------------------

    // Attempt to create and open the text file for writing
    printf("Attempting to create text file: %s\n", txt_filename);
    fr = f_open(&fil, txt_filename, FA_WRITE | FA_CREATE_ALWAYS);
    if (fr != FR_OK) {
        printf("Failed to open text file for writing. Error code: ");
        print_fresult(fr);
        return -1;
    }
    printf("Text file opened successfully\n");

    // Write the pulse data (only high and low times) to the text file in a human-readable format
    save_pulse_sequence_txt2(&fil);

    // Close the text file after writing
    f_close(&fil);
    printf("Text file closed successfully\n");
    // -------------------------------------------------------------
    
    return 0;
}

// reading of my pico directly from sd card - list all files
int readSD(void) {
    printf("Starting read operation...\n");
    if (!fs_mounted) {
        printf("Filesystem not mounted!\n");
        return -1;
    }

    printf("Attempting to open directory...\n");
    fr = f_opendir(&dir, "/");
    if (fr != FR_OK) {
        printf("Failed to open directory: ");
        print_fresult(fr);
        return -1;
    }

    printf("SD card mounted successfully!\n");
    printf("====================================================================\n");
    printf("| %-20s | %-30s \n", "Name", "Pulse Data");
    printf("====================================================================\n");

    while (1) {
        fr = f_readdir(&dir, &fno);
        if (fr != FR_OK || fno.fname[0] == 0) {
            break;
        }

        // If it's a file (not a directory) and has a .bin extension
        if (!(fno.fattrib & AM_DIR) && strstr(fno.fname, ".bin")) {
            printf("| %-20s | \n", fno.fname);

            // Calculate number of pulse pairs (each pulse has high and low time)
            uint32_t file_size = fno.fsize;
            uint32_t num_pulses = file_size / (2 * sizeof(uint32_t));  // Each pulse has 2 uint32_t values

            if (num_pulses > 0) {
                // Allocate memory for high and low times
                uint32_t *pulse_times = (uint32_t *)malloc(2 * num_pulses * sizeof(uint32_t));
                if (pulse_times == NULL) {
                    printf("Failed to allocate memory for reading pulse data.\n");
                    continue;
                }

                // Open the file for reading
                fr = f_open(&fil, fno.fname, FA_READ);
                if (fr == FR_OK) {
                    UINT br;
                    fr = f_read(&fil, pulse_times, 2 * num_pulses * sizeof(uint32_t), &br);
                    if (fr != FR_OK || br < 2 * num_pulses * sizeof(uint32_t)) {
                        printf("Failed to read pulse data from file (read %u bytes).\n", br);
                    } else {
                        // Print all the pulses read from the file
                        for (int i = 0; i < num_pulses; i++) {
                            printf("--- Digital Signal Analyzer ---\n");
                            printf("Timestamp: %u\n", 123456789 + i * 100000); // Example timestamp
                            
                            uint32_t high_time = pulse_times[2 * i];
                            uint32_t low_time = pulse_times[2 * i + 1];
                            uint32_t total_time = high_time + low_time;
                            float duty_cycle = (float)high_time / total_time * 100.0f;
                            float frequency = 1000000.0f / total_time; // Convert to Hz

                            printf("Frequency: %.2f Hz   Duty Cycle: %.2f%%\n", frequency, duty_cycle);
                            printf("Total Pulse Width: %u us\n", total_time);
                            printf("PW High Time: %u us   PW Low Time: %u us\n", high_time, low_time);
                            printf("\n");
                        }
                    }
                    f_close(&fil);
                } else {
                    printf("Failed to open file for reading: ");
                    print_fresult(fr);
                }
                free(pulse_times);
            } else {
                printf("File %s is empty or contains no valid pulse data.\n", fno.fname);
            }
        }
    }
    printf("====================================================================\n");
    f_closedir(&dir);
    return 0;
}

volatile bool write_flag = false;  // Flag for write operation
volatile bool read_flag = false;   // Flag for read operation

void button_callback(uint gpio, uint32_t events) {
    absolute_time_t current_time = get_absolute_time();
    // Debouncing logic
    if (absolute_time_diff_us(last_button_press, current_time) < DEBOUNCE_DELAY * 1000) {
        return;
    }
    last_button_press = current_time;
    // Set flags instead of directly calling writeToSD() or readSD()
    // if button press is GP20, set write_flag to true -> writeToSD() will be called
    if (gpio == WRITE_BTNPIN_20) {
        write_flag = true;
    // if button press is GP21, set read_flag to true -> readSD() will be called
    } else if (gpio == READ_BTNPIN_21) {
        read_flag = true;
    }
}

// to initialize the buttons
void init_buttons(void) {
    // Initialize the button GPIO - 20, 21
    gpio_init(WRITE_BTNPIN_20);
    gpio_set_dir(WRITE_BTNPIN_20, GPIO_IN);
    gpio_pull_up(WRITE_BTNPIN_20);
    gpio_set_irq_enabled_with_callback(WRITE_BTNPIN_20, GPIO_IRQ_EDGE_FALL, true, &button_callback);
    
    gpio_init(READ_BTNPIN_21);
    gpio_set_dir(READ_BTNPIN_21, GPIO_IN);
    gpio_pull_up(READ_BTNPIN_21);
    gpio_set_irq_enabled_with_callback(READ_BTNPIN_21, GPIO_IRQ_EDGE_FALL, true, &button_callback);

    gpio_init(EXIT_BTNPIN_22);
    gpio_set_dir(EXIT_BTNPIN_22, GPIO_IN);
    gpio_pull_up(EXIT_BTNPIN_22);

    last_button_press = get_absolute_time();
}

void init_system_with_filesystem(){
    printf("Initializing USB Serial...\n");
    stdio_init_all();
    sleep_ms(5000);
    printf("USB Serial Initialized\n");

    // Initialize filesystem
    printf("Attempting to mount filesystem...\n");
    for (int i = 0; i < 3 && !fs_mounted; i++) {
        fr = f_mount(&fs, "", 1);
        if (fr == FR_OK) {
            fs_mounted = true;
            printf("Filesystem mounted successfully\n");
            break;
        } else {
            printf("Failed to mount filesystem: ");
            print_fresult(fr);
            printf("Retrying mount attempt %d...\n", i + 1);
            sleep_ms(1000);  // Wait 1 second before retrying
        }
    }

    if (!fs_mounted) {
        printf("Failed to mount filesystem after 3 attempts. Exiting...\n");
        return;
    }

    // init_buttons();
    printf("System Initialization Completed\n");
    printf("Press GP20 to write a file, GP21 to read files\n");
}

// int main() {
//     init_system_with_filesystem();

//     pulse_count = 10;
//     initialize_pulsedata_array();
//     simulate_pulse_sequence(pulse_count);

//     while (1) {
//         // Check if the write button was pressed
//         if (write_flag) {
//             write_flag = false;  // Reset the flag
//             int result = writePulseHighLowToSD();  // Perform the write operation
//             printf("WriteToSD result: %d\n", result);
//         }
//         // Check if the read button was pressed
//         if (read_flag) {
//             read_flag = false;  // Reset the flag
//             int result = readSD();  // Perform the read operation
//             printf("ReadSD result: %d\n", result);
//         }

//         // Check if the exit button (GP22) is pressed
//         if (gpio_get(EXIT_BTNPIN_22) == 0) {  // Button pressed (active low)
//             printf("Exit button pressed. Exiting the loop...\n");
//             break;  // Exit the loop
//         }

//         tight_loop_contents();  // Prevent the system from sleeping and keep checking
//         sleep_ms(100);  // Add a delay to reduce CPU usage
//     }
//     // free_pulsedata_array();
//     cleanup_exit();
//     printf("Program exited\n");
//     return 0;  // This will never be reached
// }




=======
h file
#ifndef PULSE_DATA_H
#define PULSE_DATA_H

#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/rtc.h"
#include <string.h>
#include <stdlib.h>
#include "hardware/spi.h"
#include "ff.h"
#include "hardware/pwm.h"
#include <time.h>

// Create instances for FATFS and FIL
extern FATFS fs;
extern FIL fil;  // File object

extern DIR dir;
extern FILINFO fno;
extern FRESULT fr;

extern volatile bool write_flag;
extern volatile bool read_flag;

// Define button pins
#define WRITE_BTNPIN_20 20  // Button for creating file to SD
#define READ_BTNPIN_21 21   // Button for reading file from SD
#define EXIT_BTNPIN_22 22    // Button for exiting program

// Simple counter for file creation
extern int filename_counter;

// Debounce configuration
#define DEBOUNCE_DELAY 300
extern absolute_time_t last_button_press;

// Global variable to track if filesystem is mounted
extern bool fs_mounted;

// Experimental structure for pulse data
typedef struct {
    uint32_t timestamp;
    uint32_t frequency;
    float duty_cycle;
    uint32_t total_pulse_width; // Duration of the pulse in microseconds
    uint32_t pulse_width_high_time;
    uint32_t pulse_width_low_time;
} PulseData;

extern PulseData *pulsedata_array; // Pointer for dynamic memory allocation
extern uint32_t pulse_count; // Counter to track number of pulses
extern uint32_t pulsedata_array_size; // Size of the array

// Function declarations
void initialize_pulsedata_array();
void init_system_with_filesystem();
void print_fresult(FRESULT fr);
void simulate_pulse_sequence(uint32_t pulse_count);
void save_pulse_sequence2(FIL *file);
void save_pulse_sequence_txt2(FIL *file);
void free_pulsedata_array();
void cleanup_exit();
int writePulseHighLowToSD();
int readSD(void);

#endif // PULSE_DATA_H
